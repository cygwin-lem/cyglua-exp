################################################################
SRC_URI+=" lua.experiment"

################################################################
__str_version_cyg() {
  # Remove a period from a string "x.y" when both x and y are single-digit.
  printf '%s' "$1" | sed -E 's/^([[:digit:]])\.([[:digit:]])$/\1\2/'
}

################################################################
__current_pkg() {
  THIS_PN="$1"
}

__add_pkg() {
  THIS_PN="$1"
  PKG_NAMES+=" ${THIS_PN}"
}

__set_pkg_property() {
  local LOCAL_PN="$1"
  if [ -z "${LOCAL_PN//[-+\._]/}" ]; then
    LOCAL_PN="${THIS_PN}"
  fi
  local LOCAL_VN="${LOCAL_PN//[-+\.]/_}"
  printf -v "${LOCAL_VN}_$2" "%s" "$3"
}

__append_pkg_property() {
  local LOCAL_PN="$1"
  if [ -z "${LOCAL_PN//[-+\._]/}" ]; then
    LOCAL_PN="${THIS_PN}"
  fi
  local LOCAL_VN="${LOCAL_PN//[-+\.]/_}"
  local LOCAL_VN_PROPERTY="${LOCAL_VN}_$2"
  printf -v "${LOCAL_VN_PROPERTY}" "%s" "${!LOCAL_VN_PROPERTY}$3"
}

################################################################
cpdirs() {
  tar -C "$1" -cf - . | tar -C "$2" -xpf -
}

################################################################
__doinsdir () {
  local src="$1"
  local dst="$2"
  local f
  [ -d "${src}" ] || error "__doinsdir ${src} failed: not a directory"
  pushd "${src}"
  for f in $(find . -type d); do
    insinto "${dst}/$f"
    doins $(find "$f" -maxdepth 1 -not -type d)
  done
  popd
}

__dodocdir () {
  local src="$1"
  local dst="$2"
  local f
  [ -d "${src}" ] || error "__dodocdir ${src} failed: not a directory"
  pushd "${src}"
  for f in $(find . -type d); do
    docinto "${dst}/$f"
    dodoc $(find "$f" -maxdepth 1 -not -type d)
  done
  popd
}

################################################################
# __alternatives_install PRIORITY LINK NAME PATH [SLINK SNAME SPATH]*
__alternatives_install(){
  local ALT_PRIO=$1
  shift \
  || error "__alternatives_install(): needs parameters PRIORITY LINK NAME PATH"
  local ALT_LINK=$1
  local ALT_NAME=$2
  local ALT_PATH=$3
  shift 3 \
  || error "__alternatives_install(): needs parameters PRIORITY LINK NAME PATH"

  cat <<- _EOF_
	/usr/sbin/alternatives \\
	  --install ${ALT_LINK} \\
	    ${ALT_NAME} ${ALT_PATH} \\
	    ${ALT_PRIO} \\
	_EOF_
  while [ -n "$1" ]; do
    ALT_LINK=$1
    ALT_NAME=$2
    ALT_PATH=$3
    shift 3 \
    || error "__alternatives_install(): needs parameters SLINK SNAME SPATH"
    cat <<- _EOF_
	  --slave ${ALT_LINK} \\
	    ${ALT_NAME} ${ALT_PATH} \\
	_EOF_
  done
  cat <<- _EOF_
	  ;
	_EOF_
}

# __alternatives_remove PRIORITY LINK NAME PATH [SLINK SNAME SPATH]*
#  (only NAME and PATH are effective, and the rest are ignored)
__alternatives_remove(){
  local ALT_PRIO=$1
  shift || error "__alternatives_remove(): needs parameters PRIORITY LINK NAME PATH"
  local ALT_LINK=$1
  local ALT_NAME=$2
  local ALT_PATH=$3
  shift 3 || error "__alternatives_remove(): needs parameters PRIORITY LINK NAME PATH"

  cat <<- _EOF_
	/usr/sbin/alternatives \\
	  --remove \\
	    ${ALT_NAME} ${ALT_PATH} \\
	  ;
	_EOF_
}

################################################################
lua_path_from_dirs() {
  local p=
  local f
  for f in "$@"; do
    p+="${f%/}/?.lua;${f%/}/?/init.lua;"
  done
  printf '%s' "${p%;}"
}

lua_cpath_from_dirs() {
  local p=
  local f
  for f in "$@"; do
    p+="${f%/}/?.so;${f%/}/?.dll;"
  done
  printf '%s' "${p%;}"
}

################################################################
